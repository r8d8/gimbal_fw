ARG ROS_DISTRO=humble
FROM ros:$ROS_DISTRO-ros-base


# disable terminal interaction for apt
ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"]

# Env setup
RUN apt-get clean && apt-get update && apt-get install -y locales curl
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV ROS_PYTHON_VERSION=3
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp
ENV PROJECT_NAME=jcomp

# Avoid setup.py and easy_install deprecation warnings caused by colcon and setuptools
# https://github.com/colcon/colcon-core/issues/454
ENV PYTHONWARNINGS=ignore:::setuptools.command.install,ignore:::setuptools.command.easy_install,ignore:::pkg_resources,ignore:::setuptools.command.develop
RUN echo "Warning: Using the PYTHONWARNINGS environment variable to silence setup.py and easy_install deprecation warnings caused by colcon"

# Add ROS2 apt repository
RUN apt-get install software-properties-common -y\
    && add-apt-repository universe

# RUN --mount=type=cache,target=/var/cache/apt \
#     curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
#     && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null \
#     && apt-get update

# Use Cyclone DDS as middleware
RUN apt-get update && apt-get install -y --no-install-recommends \
  ros-${ROS_DISTRO}-rmw-cyclonedds-cpp
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# Switch to the non-root user
ARG USERNAME=juser
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

USER $USERNAME

ENV USER_WORKSPACE=/home/$USERNAME/ros2_ws
WORKDIR $USER_WORKSPACE


# Install gstreamer
RUN --mount=type=cache,target=/var/cache/apt\
    sudo apt-get -q update \
    && sudo apt-get -q install --no-install-recommends -y \
    python3-gi \
    gstreamer1.0-tools \
    gir1.2-gstreamer-1.0 \
    gir1.2-gst-plugins-base-1.0 \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-libav \
    libgstreamer1.0-dev \
    gstreamer1.0-gl \
    libgstreamer-plugins-base1.0-dev 
    # && sudo apt-get autoremove -y \
    # && sudo apt-get clean -y \
    # && sudo rm -rf /var/lib/apt/lists/*

# Python in Ubuntu is now marked as a "Externally managed environment",
# Per best practice, create a venv for local python packages
# Is there a more elegant way to handle this?
#
# These two ENVs effectively "activate" the venv for subsequent calls to
# python/pip in the Dockerfile

RUN --mount=type=cache,target=/var/cache/apt\ 
    sudo apt-get install -y \
    python3-venv\
    python3-vcstool\
    python3-rosinstall-generator\
    python3-osrf-pycommon\
    ros-dev-tools

ENV VIRTUAL_ENV=/home/$USERNAME/.venv/jcomp
RUN python3 -m venv --system-site-packages --symlinks $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

COPY --chown=$USER_UID:$USER_GID . src/$PROJECT_NAME

# ROS2 Python fundamentals
RUN python3 -m pip install -U \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-docstrings \
        flake8-import-order \
        flake8-quotes \
        numpy>=1.24.4 \
        matplotlib \
        rosbags \
        setuptools==65.7.0

# turn the detached message off
RUN git config --global advice.detachedHead false

# Manually install MAVROS from source
# 2. Install MAVLink
#    we use the Kinetic reference for all ROS2 distros as it's not distro-specific and up to date
RUN rosinstall_generator --format repos mavlink | tee /tmp/mavlink.repos

# 3. Install MAVROS: get source (upstream - released)
RUN rosinstall_generator --format repos --upstream mavros --deps | tee -a /tmp/mavros.repos
# alternative: latest source
# rosinstall_generator --format repos --upstream-development mavros | tee -a /tmp/mavros.repos
# For fetching all the dependencies into your ros2_ws, just add '--deps' to the above scripts
# ex: rosinstall_generator --format repos --upstream mavros --deps | tee -a /tmp/mavros.repos

# 4. Create workspace & deps
RUN vcs import src < /tmp/mavlink.repos
RUN cat /tmp/mavros.repos
RUN vcs import src < /tmp/mavros.repos
RUN rosdep update
RUN rosdep install --from-paths src --ignore-src -y -r --rosdistro=${ROS_DISTRO}

# 6. Build source
RUN source /opt/ros/$ROS_DISTRO/setup.bash
RUN colcon build


# Install geographiclib datasets
# Scripts uses geographiclib-tools which is a rosdep dependency of mavros installed above
WORKDIR /tmp
RUN wget https://raw.githubusercontent.com/mavlink/mavros/ros2/mavros/scripts/install_geographiclib_datasets.sh \
    && chmod +x /tmp/install_geographiclib_datasets.sh \
    && sudo /tmp/install_geographiclib_datasets.sh

# # Manually install MAVROS from source 
# WORKDIR $USER_WORKSPACE/src
# ARG MAVROS_RELEASE=ros2
# ARG MAVLINK_RELEASE=release/humble/mavlink
# RUN git clone --depth 1 -b ${MAVROS_RELEASE} https://github.com/mavlink/mavros.git
# RUN git clone --depth 1 --recursive -b ${MAVLINK_RELEASE} https://github.com/mavlink/mavlink-gbp-release.git mavlink
# # - mavgen uses future.standard_library for backwards compatibility with Python2;
# #   However, this caused issues with Python 3.12 installed in "noble".
# #   Comment those lines out in mavlink.
# #
# # - Fix linkage for yaml-cpp in mavros_extra_plugins
# RUN sed -i -e 's/^from future import standard_library/#from future import standard_library/' \
#     -e 's/standard_library.install_aliases()/#standard_library.install_aliases()/' \
#     mavlink/pymavlink/generator/mavgen.py && \
#     sed -i -e 's/^# find_package(yaml_cpp REQUIRED)/find_package(yaml-cpp REQUIRED)/' \
#     -e '/^ament_target_dependencies(mavros_extras_plugins$/i target_link_libraries(mavros_extras_plugins yaml-cpp::yaml-cpp)' \
#     -e '/^ament_target_dependencies(mavros_extras$/i target_link_libraries(mavros_extras yaml-cpp::yaml-cpp)' \
#     mavros/mavros_extras/CMakeLists.txt

# WORKDIR $USER_WORKSPACE
# RUN sudo apt-get -q update \
#     && sudo apt-get -q -y upgrade 
# RUN rosdep update \
#     && rosdep install -y --from-paths src --ignore-src --rosdistro=${ROS_DISTRO} \
#     && sudo apt-get autoremove -y \
#     && sudo apt-get clean -y \
#     && sudo rm -rf /var/lib/apt/lists/*

# # Actually build workspace
# RUN . "/opt/ros/${ROS_DISTRO}/setup.sh" \
#     && colcon build

# 7. Make sure that you use setup.bash or setup.zsh from workspace.
#    Else ros2 run can't find nodes from this workspace.
RUN source install/setup.bash

RUN . ${ROS_ROOT}/install/local_setup.bash \
    && echo "source $ROS_ROOT/install/setup.bash" >> /home/$USERNAME/.bashrc \
    && echo "source $ROS_ROOT/install/local_setup.bash" >> /home/$USERNAME/.bashrc\
    && echo "\n# Ensure colcon is run in the venv\nalias colcon='python3 -m colcon'" >> /home/$USERNAME/.bashrc

RUN  ros2 launch $USER_WORKSPACE/src/$PROJECT_NAME/config/apm.launch

# Set up the entrypoint
COPY ./ros2_entrypoint.sh /
ENTRYPOINT [ "/ros2_entrypoint.sh" ]