FROM docker.io/arm64v8/ubuntu:22.04

# Env setup
RUN apt-get clean && apt-get update && apt-get install -y locales curl
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV ROS_VERSION=2
ENV ROS_DISTRO=humble
ENV ROS_PYTHON_VERSION=3
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES all
SHELL ["/bin/bash", "-c"]

ARG DEBIAN_FRONTEND=noninteractive
RUN --mount=type=cache,target=/var/cache/apt\  
    apt-get update\
    && apt-get install -qq -y --no-install-recommends \
        bash-completion \
        bc \
        build-essential \
        bzip2 \
        can-utils \
        ca-certificates \
        cmake \
        command-not-found \
        curl \
        emacs \
        freeglut3-dev \
        git \
        gnupg2 \
        gstreamer1.0-alsa \
        gstreamer1.0-libav \
        gstreamer1.0-plugins-bad \
        gstreamer1.0-plugins-base \
        gstreamer1.0-plugins-good \
        gstreamer1.0-plugins-ugly \
        gstreamer1.0-tools \
        i2c-tools \
        iproute2 \
        iputils-ping \
        iw \
        kbd \
        kmod \
        language-pack-en-base \
        libapt-pkg-dev \
        libcanberra-gtk3-module \
        libgles2 \
        libglu1-mesa-dev \
        libglvnd-dev \
        libgtk-3-0 \
        libudev1 \
        libvulkan1 \
        libzmq5 \
        mesa-utils \
        mtd-utils \
        parted \
        pciutils \
        python3 \
        python3-distutils \
        python3-numpy \
        python3-pexpect \
        python3-pip \
        sox \
        sudo \
        tmux \
        udev \
        vulkan-tools \
        wget \
        wireless-tools \
        wpasupplicant \
    && apt-get clean\
    && rm -rf /var/lib/apt/lists/*

# EGL
RUN echo "/usr/lib/aarch64-linux-gnu/tegra" >> /etc/ld.so.conf.d/nvidia-tegra.conf\
    && echo "/usr/lib/aarch64-linux-gnu/tegra-egl" >> /etc/ld.so.conf.d/nvidia-tegra.conf
RUN rm -rf /usr/share/glvnd/egl_vendor.d\
    && mkdir -p /usr/share/glvnd/egl_vendor.d/ && echo '\
    {\
        "file_format_version" : "1.0.0",\
        "ICD" : {\
            "library_path" : "libEGL_nvidia.so.0"\
        }\
    }' > /usr/share/glvnd/egl_vendor.d/10_nvidia.json
RUN mkdir -p /usr/share/egl/egl_external_platform.d/ && echo '\
    {\
        "file_format_version" : "1.0.0",\
        "ICD" : {\
            "library_path" : "libnvidia-egl-wayland.so.1"\
        }\
    }' > /usr/share/egl/egl_external_platform.d/nvidia_wayland.json

RUN echo "deb https://repo.download.nvidia.com/jetson/common r35.4 main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list\
    && echo "deb https://repo.download.nvidia.com/jetson/t234 r35.4 main" >> /etc/apt/sources.list.d/nvidia-l4t-apt-source.list
RUN wget -O /etc/jetson-ota-public.key https://gitlab.com/nvidia/container-images/l4t-base/-/raw/master/jetson-ota-public.key\
    && apt-key add /etc/jetson-ota-public.key

# CUDA, cuDNN, TensorRT
RUN --mount=type=cache,target=/var/cache/apt\ 
    apt-get update\
    && apt-get install -qq -y --no-install-recommends \
        cuda \
        libcudnn8 \
        libcudnn8-dev \
        libcudnn8-samples \
        tensorrt \
        tensorrt-libs \
        tensorrt-dev \
        libnvinfer8 \
        libnvinfer-dev \
        gcc-9 \
        g++-9 \
    && apt-get clean\
    && rm -rf /var/lib/apt/lists/*
RUN ln -s /usr/bin/gcc-9 /usr/local/cuda/bin/gcc\
    && ln -s /usr/bin/g++-9 /usr/local/cuda/bin/g++
RUN ldconfig\
    && echo "export PATH=/usr/local/cuda/bin:$PATH" >> ~/.bashrc\
    && echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> ~/.bashrc

# Set default to Python 3
RUN ln -s /usr/bin/python3.10 /usr/bin/python

# Install ROS2 Humble
RUN apt-get update && apt-get upgrade
RUN apt-get install -y software-properties-common\
    && add-apt-repository universe
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt-get update && apt-get install -y --no-install-recommends \
        ros-${ROS_DISTRO}-ros-base \
        ros-dev-tools
RUN apt-get clean\
    && rm -rf /var/lib/apt/lists/*

# Install colcon and rosdep
RUN sudo apt-get update && sudo apt-get install -y --no-install-recommends \
        python3-colcon-common-extensions \
        python3-rosdep 

# Install Mavros deps
RUN --mount=type=cache,target=/var/cache/apt\ 
    apt-get install -y --no-install-recommends\
    python3-rosdep \
    python3-colcon-common-extensions \
    python3.10-venv\
    python3-vcstool\
    python3-rosinstall-generator\
    python3-osrf-pycommon

# Initialize rosdep
RUN sudo rosdep init &&\
    rosdep update

# Install Mavros 
WORKDIR /tmp
RUN wget https://raw.githubusercontent.com/mavlink/mavros/ros2/mavros/scripts/install_geographiclib_datasets.sh \
    && chmod +x ./install_geographiclib_datasets.sh \
    && sudo ./install_geographiclib_datasets.sh

  
RUN --mount=type=cache,target=/var/cache/apt\  
    apt-get install -y ros-humble-mavros\
    ros-humble-mavros-extras

# add new sudo user
ENV USERNAME juser
ARG USERNAME=juser
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME\
    && usermod -a -G dialout $USERNAME

USER $USERNAME
ENV USER_WORKSPACE=/home/$USERNAME/ros2_ws

ENV PROJECT_NAME=jcomp
ENV VIRTUAL_ENV=/home/$USERNAME/.venv/${PROJECT_NAME}
RUN python3 -m venv --system-site-packages --symlinks $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc\
    && echo "source ${USER_WORKSPACE}/install/local_setup.bash" >> ~/.bashrc\
    && echo "source /home/${USERNAME}/.venv/${PROJECT_NAME}/bin/activate" >>  ~/.bashrc\
    && echo "\n# Ensure colcon is run in the venv\nalias colcon='python3 -m colcon'" >> ~/.bashrc\
    && echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc

COPY --chown=$USER_UID:$USER_GID . ${USER_WORKSPACE}/src/$PROJECT_NAME

# Launch mavros node
RUN . "/opt/ros/${ROS_DISTRO}/setup.sh" \
    && ros2 launch mavros apm.launch  fcu_url:=/dev/ttyTHS1:115200 gcs_url:=udp://192.168.191.18

# Set up the entrypoint
COPY ./ros2_entrypoint.sh /
ENTRYPOINT [ "/ros2_entrypoint.sh" ]